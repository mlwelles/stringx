// Code generated by "enumer -type=Finder"; DO NOT EDIT.

//
package stringx

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const _FinderName = "FinderUndefinedFinderIndexFinderRegexpFinderTermPrefixFinderSahilmFuzzyFindFinderLithammerFuzzyFindFinderLithammerFuzzyFindFoldFinderLithammerFuzzyFindNormalizedFinderLithammerFuzzyFindNormalizedFoldFinderLithammerFuzzyRankFindFinderLithammerFuzzyRankFindFoldFinderLithammerFuzzyRankFindNormalizedFinderLithammerFuzzyRankFindNormalizedFold"

var _FinderIndex = [...]uint16{0, 15, 26, 38, 54, 75, 99, 127, 161, 199, 227, 259, 297, 339}

func (i Finder) String() string {
	if i < 0 || i >= Finder(len(_FinderIndex)-1) {
		return fmt.Sprintf("Finder(%d)", i)
	}
	return _FinderName[_FinderIndex[i]:_FinderIndex[i+1]]
}

var _FinderValues = []Finder{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12}

var _FinderNames = []string{"FinderUndefined", "FinderIndex", "FinderRegexp", "FinderTermPrefix", "FinderSahilmFuzzyFind", "FinderLithammerFuzzyFind", "FinderLithammerFuzzyFindFold", "FinderLithammerFuzzyFindNormalized", "FinderLithammerFuzzyFindNormalizedFold", "FinderLithammerFuzzyRankFind", "FinderLithammerFuzzyRankFindFold", "FinderLithammerFuzzyRankFindNormalized", "FinderLithammerFuzzyRankFindNormalizedFold"}

var _FinderNameToValueMap = map[string]Finder{
	_FinderName[0:15]:    0,
	_FinderName[15:26]:   1,
	_FinderName[26:38]:   2,
	_FinderName[38:54]:   3,
	_FinderName[54:75]:   4,
	_FinderName[75:99]:   5,
	_FinderName[99:127]:  6,
	_FinderName[127:161]: 7,
	_FinderName[161:199]: 8,
	_FinderName[199:227]: 9,
	_FinderName[227:259]: 10,
	_FinderName[259:297]: 11,
	_FinderName[297:339]: 12,
}

// FinderString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func FinderString(s string) (Finder, error) {

	if val, ok := _FinderNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Finder values", s)
}

func ParseFinder(s string) (Finder, error) {
	return FinderString(s)
}

// FinderValues returns all values of the enum
func FinderValues() []Finder {
	return _FinderValues
}

func FinderNames() []string {
	return _FinderNames
}

// IsAFinder returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Finder) IsAFinder() bool {
	for _, v := range _FinderValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Finder
func (i Finder) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Finder
func (i *Finder) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Finder should be a string, got %s", data)
	}

	var err error
	*i, err = FinderString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for Finder
func (i Finder) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Finder
func (i *Finder) UnmarshalText(text []byte) error {
	var err error
	*i, err = FinderString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for Finder
func (i Finder) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for Finder
func (i *Finder) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = FinderString(s)
	return err
}

func (i Finder) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *Finder) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := FinderString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
